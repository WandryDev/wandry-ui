{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "select-field",
  "type": "registry:component",
  "title": "Select Field",
  "description": "A component for Wandry UI",
  "dependencies": [
    "@wandry/inertia-form@^1.7.0-beta.1"
  ],
  "registryDependencies": [
    "select"
  ],
  "files": [
    {
      "path": "registry/wandry-ui/select-field.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport * as SelectPrimitive from \"@radix-ui/react-select\";\n\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectLabel,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\n\nimport {\n  Field,\n  FieldDescription,\n  FieldError,\n  FieldLabel,\n} from \"@/components/ui/field\";\nimport { useField } from \"@wandry/inertia-form\";\nimport { Button } from \"@/components/ui/button\";\nimport { XIcon } from \"lucide-react\";\n\ninterface Options {\n  value: string;\n  label: string;\n}\ninterface GroupedOptions {\n  [key: string]: { value: string; label: string }[];\n}\n\nexport type SelectProps = React.ComponentProps<typeof SelectPrimitive.Root>;\nexport type SelectGroupProps = React.ComponentProps<\n  typeof SelectPrimitive.Group\n>;\nexport type SelectValueProps = React.ComponentProps<\n  typeof SelectPrimitive.Value\n>;\nexport type SelectContentProps = React.ComponentProps<\n  typeof SelectPrimitive.Content\n>;\nexport type SelectItemProps = React.ComponentProps<typeof SelectPrimitive.Item>;\n\nexport type SelectTriggerProps = React.ComponentProps<\n  typeof SelectPrimitive.Trigger\n> & {\n  size?: \"sm\" | \"default\";\n};\n\nexport type SelectFieldProps = {\n  name: string;\n  placeholder?: string;\n  label?: string;\n  description?: string;\n  options: Options[] | GroupedOptions;\n  selectProps?: SelectProps;\n  contentProps?: SelectContentProps;\n  triggerProps?: SelectTriggerProps;\n  itemProps?: Omit<SelectItemProps, \"value\">;\n};\n\nconst isGroupedOptions = (\n  options: Options[] | GroupedOptions\n): options is GroupedOptions => {\n  return !Array.isArray(options);\n};\n\nconst SelectField: React.FC<SelectFieldProps> = ({\n  name,\n  options,\n  label,\n  description,\n  placeholder,\n  selectProps,\n  contentProps,\n  triggerProps,\n  itemProps,\n}) => {\n  const field = useField(name);\n\n  return (\n    <Field>\n      <FieldLabel>{label}</FieldLabel>\n      <Select\n        name={name}\n        value={field.value}\n        onValueChange={field.onChange}\n        {...selectProps}\n      >\n        <SelectTrigger {...triggerProps}>\n          <SelectValue placeholder={placeholder} />\n        </SelectTrigger>\n        <SelectContent {...contentProps}>\n          {isGroupedOptions(options) ? (\n            <SelectFieldGroupedContent options={options} {...itemProps} />\n          ) : (\n            <SelectFieldContent options={options} {...itemProps} />\n          )}\n        </SelectContent>\n      </Select>\n      <FieldDescription>{description}</FieldDescription>\n      <FieldError>{field.error}</FieldError>\n    </Field>\n  );\n};\n\nconst SelectFieldContent: React.FC<\n  { options: Options[] } & Omit<SelectItemProps, \"value\">\n> = ({ options, ...itemProps }) => {\n  return (\n    <>\n      {options.map((option) => (\n        <SelectItem {...itemProps} key={option.value} value={option.value}>\n          {option.label}\n        </SelectItem>\n      ))}\n    </>\n  );\n};\n\nconst SelectFieldGroupedContent: React.FC<\n  { options: GroupedOptions } & Omit<SelectItemProps, \"value\">\n> = ({ options, ...itemProps }) => {\n  return (\n    <>\n      {Object.entries(options).map(([group, items]) => (\n        <SelectGroup key={group}>\n          <SelectLabel>{group}</SelectLabel>\n          {items.map((item) => (\n            <SelectItem {...itemProps} key={item.value} value={item.value}>\n              {item.label}\n            </SelectItem>\n          ))}\n        </SelectGroup>\n      ))}\n    </>\n  );\n};\n\nexport default SelectField;\n",
      "type": "registry:component"
    }
  ]
}