{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "input-otp-field",
  "type": "registry:component",
  "title": "InputOtpField",
  "description": "A component for Wandry UI",
  "dependencies": [
    "@wandry/inertia-form@^1.7.0-beta.1"
  ],
  "registryDependencies": [
    "input-otp"
  ],
  "files": [
    {
      "path": "registry/wandry-ui/input-otp-field.tsx",
      "content": "\"use client\";\nimport * as React from \"react\";\nimport { useField } from \"@wandry/inertia-form\";\nimport { OTPInput } from \"input-otp\";\n\nimport {\n  Field,\n  FieldDescription,\n  FieldError,\n  FieldLabel,\n} from \"@/components/ui/field\";\nimport {\n  InputOTP,\n  InputOTPGroup,\n  InputOTPSlot,\n} from \"@/components/ui/input-otp\";\nimport { Button } from \"@/components/ui/button\";\n\nexport type InputOtpProps = Omit<\n  React.ComponentProps<typeof OTPInput>,\n  \"render\"\n>;\n\ntype ResendFn = () => void;\n\nexport type ResendProps = {\n  onResend?: ResendFn;\n  didntReceivePlaceholder?: string;\n  resendButtonPlaceholder?: string;\n  resendPlaceholder?: string;\n  resendTimeoutMs?: number;\n};\n\nexport type InputOtpFieldProps = {\n  name: string;\n  label?: string;\n  description?: string;\n  length?: number;\n} & ResendProps;\n\nconst hasResendLogic = (onResend?: () => void): onResend is ResendFn => {\n  return onResend !== null && onResend !== undefined;\n};\n\nconst InputOtpField: React.FC<InputOtpFieldProps> = ({\n  name,\n  label,\n  description,\n  onResend,\n  resendPlaceholder,\n  resendTimeoutMs,\n  resendButtonPlaceholder,\n  didntReceivePlaceholder,\n  length = 6,\n  ...inputOtpProps\n}) => {\n  const field = useField(name, { defaultValue: \"\" });\n\n  return (\n    <Field>\n      <FieldLabel htmlFor={name}>{label}</FieldLabel>\n      <InputOTP\n        {...inputOtpProps}\n        maxLength={length}\n        value={field.value}\n        onChange={field.onChange}\n      >\n        <InputOTPGroup>\n          {Array.from({ length }).map((_, index) => (\n            <InputOTPSlot index={index} key={name + index} />\n          ))}\n        </InputOTPGroup>\n      </InputOTP>\n      <FieldDescription>\n        {hasResendLogic(onResend) ? (\n          <Resend\n            onResend={onResend}\n            resendPlaceholder={resendPlaceholder}\n            didntReceivePlaceholder={didntReceivePlaceholder}\n            resendButtonPlaceholder={resendButtonPlaceholder}\n            resendTimeoutMs={resendTimeoutMs}\n          />\n        ) : (\n          description\n        )}\n      </FieldDescription>\n      <FieldError>{field.error}</FieldError>\n    </Field>\n  );\n};\n\nconst Resend: React.FC<ResendProps> = ({\n  onResend,\n  didntReceivePlaceholder = \"Didn't receive the code?\",\n  resendButtonPlaceholder = \"Resend\",\n  resendPlaceholder = \"Resend code in\",\n  resendTimeoutMs = 60,\n}) => {\n  const [countdown, setCountdown] = React.useState(resendTimeoutMs);\n  const [canResend, setCanResend] = React.useState(false);\n\n  const handleResend = () => {\n    setCountdown(60);\n    setCanResend(false);\n\n    onResend?.();\n  };\n\n  React.useEffect(() => {\n    if (countdown > 0) {\n      const timer = setTimeout(() => setCountdown(countdown - 1), 1000);\n      return () => clearTimeout(timer);\n    }\n    setCanResend(true);\n  }, [countdown]);\n\n  return (\n    <div className=\"flex items-center justify-between text-sm\">\n      <span className=\"text-muted-foreground\">\n        {canResend\n          ? didntReceivePlaceholder\n          : `${resendPlaceholder} ${countdown}s`}\n      </span>\n      <Button\n        className=\"h-auto p-0\"\n        disabled={!canResend}\n        onClick={handleResend}\n        size=\"sm\"\n        variant=\"link\"\n      >\n        {resendButtonPlaceholder}\n      </Button>\n    </div>\n  );\n};\n\nexport default InputOtpField;\n",
      "type": "registry:component"
    }
  ]
}