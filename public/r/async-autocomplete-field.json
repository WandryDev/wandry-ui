{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "async-autocomplete-field",
  "type": "registry:component",
  "title": "AsyncAutocompleteField",
  "description": "A component for Wandry UI",
  "dependencies": [
    "@wandry/inertia-form@^1.7.0-beta.1"
  ],
  "registryDependencies": [
    "popover",
    "command",
    "button"
  ],
  "files": [
    {
      "path": "registry/wandry-ui/async-autocomplete-field.tsx",
      "content": "\"use client\";\n\nimport * as React from \"react\";\nimport { useEffect, useState } from \"react\";\nimport { Check, ChevronsUpDown, Loader2 } from \"lucide-react\";\n\nimport { useField } from \"@wandry/inertia-form\";\n\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\";\nimport {\n  Field,\n  FieldDescription,\n  FieldError,\n  FieldLabel,\n} from \"@/components/ui/field\";\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\";\nimport { cn } from \"@/lib/utils\";\n\nexport type Option = {\n  value: string;\n  label: string;\n};\n\nexport type LoadFn = (inputValue: string) => Promise<Option[]>;\n\nexport type AsyncAutocompleteFieldProps = {\n  name: string;\n  label?: string;\n  placeholder?: string;\n  description?: string;\n  inputPlaceholder?: string;\n  loadingPlaceholder?: string;\n  initPlaceholder?: string;\n  emptyPlaceholder?: string;\n  loadOptions: LoadFn;\n};\n\nconst AsyncAutocompleteField: React.FC<AsyncAutocompleteFieldProps> = ({\n  name,\n  label,\n  description,\n  placeholder = \"Select an option\",\n  inputPlaceholder = \"Type to search...\",\n  loadingPlaceholder = \"Searching...\",\n  initPlaceholder = \"Start typing to search\",\n  emptyPlaceholder = \"No results found.\",\n  loadOptions,\n}) => {\n  const field = useField(name);\n\n  const [open, setOpen] = useState(false);\n  const [query, setQuery] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const [results, setResults] = useState<Option[]>([]);\n\n  const onLoad = async (query: string) => {\n    if (!query) {\n      setResults([]);\n      return;\n    }\n    setIsSearching(true);\n    const options = await loadOptions(query);\n\n    setIsSearching(false);\n    setResults(options);\n  };\n\n  const onSelect = (option: Option) => {\n    field.onChange(option);\n    setOpen(false);\n  };\n\n  useEffect(() => {\n    onLoad(query);\n  }, [query]);\n\n  return (\n    <Field>\n      <FieldLabel>{label}</FieldLabel>\n      <Popover onOpenChange={setOpen} open={open}>\n        <PopoverTrigger asChild>\n          <Button\n            aria-expanded={open}\n            className=\"justify-between\"\n            role=\"combobox\"\n            variant=\"outline\"\n          >\n            {field.value?.label ?? placeholder}\n            <ChevronsUpDown className=\"ml-2 size-4 shrink-0 opacity-50\" />\n          </Button>\n        </PopoverTrigger>\n        <PopoverContent className=\"w-[250px] p-0\">\n          <Command shouldFilter={false}>\n            <CommandInput\n              onValueChange={setQuery}\n              placeholder={inputPlaceholder}\n              value={query}\n            />\n            <CommandList>\n              {isSearching ? (\n                <div className=\"flex items-center justify-center p-4\">\n                  <Loader2 className=\"size-4 animate-spin\" />\n                  <span className=\"ml-2 text-muted-foreground text-sm\">\n                    {loadingPlaceholder}\n                  </span>\n                </div>\n              ) : (\n                <>\n                  {!query && (\n                    <div className=\"p-4 text-center text-muted-foreground text-sm\">\n                      {initPlaceholder}\n                    </div>\n                  )}\n                  {query && results.length === 0 && !isSearching && (\n                    <CommandEmpty>{emptyPlaceholder}</CommandEmpty>\n                  )}\n                  {results.length > 0 && (\n                    <CommandGroup>\n                      {results.map((option) => (\n                        <CommandItem\n                          key={option.value}\n                          onSelect={() => onSelect(option)}\n                          value={option.value}\n                        >\n                          <Check\n                            className={cn(\n                              \"mr-2 size-4\",\n                              field.value?.value === option.value\n                                ? \"opacity-100\"\n                                : \"opacity-0\"\n                            )}\n                          />\n                          {option.label}\n                        </CommandItem>\n                      ))}\n                    </CommandGroup>\n                  )}\n                </>\n              )}\n            </CommandList>\n          </Command>\n        </PopoverContent>\n      </Popover>\n      <FieldDescription>{description}</FieldDescription>\n      <FieldError>{field.error}</FieldError>\n    </Field>\n  );\n};\n\nexport default AsyncAutocompleteField;\n",
      "type": "registry:component"
    }
  ]
}